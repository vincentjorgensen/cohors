---
- hosts: localhost
  connection: local
  gather_facts: False
  vars:
    instance_type: t2.medium
    release: xenial
    uregion: "{{ region | regex_replace('-', '_') }}"
  tasks:
  - name: "Stack facts for {{ region }}-infra-{{ environs }}"
    cloudformation_stack_facts:
      stack_name: "{{ region }}-infra-{{ environs }}"
      region: "{{ region }}"
    register: stack_infra
  - name: "Provision {{ region }}-{{ stack }}-{{ environs }}"
    cloudformation:
      region: "{{ region }}"
      stack_name: "{{ region }}-{{ stack }}-{{ environs }}"
      state: "{{stack_state }}"
      template: "{{ base_dir }}/cf/{{ region }}-{{ stack }}-{{ environs }}.cftemplate"
#      template_format: yaml
      template_parameters:
        AppName: "{{ stack }}"
        CohorsSecurityGroup: "{{ stack_infra.stack_outputs.SecurityGroup }}"
        Environs: "{{ environs }}"
        ExternalRouteTableId: "{{ stack_infra.stack_outputs.FirstPublicRoute Table }}"
        KeyName: "{{ key_name[environs] }}"
        ImageId: "{{ amis[release][uregion] }}"
        InternalRouteTableId: "{{stack_infra.stack_outputs.FirstPrivateRouteTable }}"
        InstanceType: "{{ instance_type }}"
        KeyName: "{{ key_name[environs] }}"
        PublicDnsZone: "{{ public_dns_zone }}"
        PrivateDnsZone: "{{ public_dns_zone }}"
        Region: "{{ region }}"
        SecondVpnOctet: "{{ second_octet[environs][uregion].vpn }}"
        SubnetId: "{{ stack_infra.stack_outputs.FirstPublicSubnet }}"
        VpcId: "{{ stack_infra.stack_outputs.Vpc }}"
