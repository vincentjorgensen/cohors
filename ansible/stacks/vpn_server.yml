---
Description: OpenVPN Server
Parameters:
  ClientPoolCidr:
    Type: String
  DnsZone:
    Type: String
  Environs:
    Type: String
  ExternalRouteTableId:
    Type: String
  ImageId:
    Type: String
  InstanceType:
    Type: String
  InternalRouteTableId:
    Type: String
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
  S3Bucket:
    Type: String
  S3Prefix:
    Type: String
  SubnetId:
    Type: AWS::EC2::Subnet::Id
  VpcName:
    Type: String
  VpcId:
    Type: AWS::EC2::VPC::Id
  VpcNetString:
    Type: String
  VpnCidr:
    Type: String
  VpnString:
    Type: String
Resources:
  IAMUser:
    Type: AWS::IAM::User
    Properties:
      Policies:
      - PolicyName: IAMAccess
        PolicyDocument:
          Statement:
          - Effect: Allow
            NotAction: iam:*
            Resource: "*"
  HostKeys:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName:
        Ref: IAMUser
  VpnAccessServerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/VpnAccessServer/"
      Policies:
      - PolicyName: VpnAccessServerPolicy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - s3:Get*
            Resource:
              Fn::Join:
              - ''
              - - 'arn:aws:s3:::'
                - Ref: S3Bucket
                - "/"
                - Ref: S3Prefix
                - "/*"
  VpnAccessServerProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/VpnAccessServer/"
      Roles:
      - Ref: VpnAccessServerRole
  VpnInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId:
        Ref: ImageId
      InstanceType: t2.medium
      IamInstanceProfile:
        Ref: VpnAccessServerProfile
      KeyName:
        Ref: KeyName
      SecurityGroupIds:
      - Ref: SecurityGroup
      SourceDestCheck: 'False'
      SubnetId:
        Ref: SubnetId
      Tags:
      - Key: Name
        Value:
          Ref: AWS::StackName
  ElasticIp:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId:
        Ref: VpnInstance
      Domain: vpc
  VpnServerDnsRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName:
        Ref: DnsZone
      Name:
        Fn::Join:
        - ''
        - - Ref: VpcName
          - -vpn
          - "."
          - Ref: DnsZone
      ResourceRecords:
      - Ref: ElasticIp
      TTL: 300
      Type: A
  # VPN client access server routes
  IntRouteTableEntry:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock:
        Ref: VpnCidr
      InstanceId:
        Ref: VpnInstance
      RouteTableId:
        Ref: InternalRouteTableId
  ExtRouteTableEntry:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock:
        Ref: VpnCidr
      InstanceId:
        Ref: VpnInstance
      RouteTableId:
        Ref: ExternalRouteTableId
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: vpn-access-sg
      SecurityGroupEgress: []
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        IpProtocol: UDP
        FromPort: '1194'
        ToPort: '1195'
      - CidrIp: 10.0.0.0/8
        IpProtocol: -1
        FromPort: '-1'
        ToPort: '-1'
      - CidrIp: 172.16.0.0/12
        IpProtocol: -1
        FromPort: '-1'
        ToPort: '-1'
      - CidrIp: 0.0.0.0/0 # temporary
        IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
      Tags:
      - Key: Name
        Value: vpn-access-sg
      VpcId:
        Ref: VpcId
Outputs:
  ExternalIp:
    Value:
      Ref: ElasticIp
